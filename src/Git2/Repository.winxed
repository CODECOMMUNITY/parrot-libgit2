$include_const 'datatypes.pasm';
$include_const "iglobals.pasm";
const int DATATYPE_SIZE_T = DATATYPE_LONG; // TODO: probe for appropriate type
const int DATATYPE_GIT_TIME_T = DATATYPE_INT64; // TODO: probe for support

function load[anon,load]() {
  load_bytecode('./src/git2.pbc');
  load_bytecode('./src/Git2/Common.pbc');
  load_bytecode('./src/Git2/Cache.pbc');
  load_bytecode('./src/Git2/RefCache.pbc');
}

/*
struct git_repository {
    git_odb *db;

    git_cache objects;
    git_refcache references;

    char *path_repository;
    char *path_index;
    char *path_odb;
    char *path_workdir;

    unsigned is_bare:1;
    unsigned int lru_counter;
};
*/

namespace Git2 {
  class Repository {
    function get_sv() {
        var git_cache    = new Git2.Cache();
        var git_refcache = new Git2.RefCache();
        var sv = new 'StructView'([ DATATYPE_STRUCT, 9,
                DATATYPE_PTR,
                DATATYPE_SIZED, git_cache.size(), git_cache.align(),
                DATATYPE_SIZED, git_refcache.size(), git_refcache.align(),
                DATATYPE_PTR,
                DATATYPE_PTR,
                DATATYPE_PTR,
                DATATYPE_PTR,
                DATATYPE_UINT,
                DATATYPE_UINT
            ]);
        while (1) { yield(sv); }
    }
    var ptr;
    function Repository() {
        self.ptr = get_sv().alloc();
    }
  }
}
